///////////////////////////////////////////////////////////////////////////////////////////////
//
// File Summary  : <Handles all the Bill operations by calling the DB Functions and implementing logic as required>
// ---------------------------------------------------------------------------------
// Date Created  : <14/11/2014>
// Author   : <Saikat,Akansh>, Tata Consultancy Services
// ---------------------------------------------------------------------------------
// Change History : N/A
// Change Description# : N/A
// Changed By  :N/A
// Date Modified  : N/A
// Change Description# : N/A
// Changed By  :N/A
// Date Modified  :N/A
//
///////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using BEP.TYPES;
using BEP.DAL_FACTORY;
using BEP.DAL;
using BEP.BO;
using BEP.BO_FACTORY;

namespace BEP.BLL
{
    public class BillManager : IBillManager
    {
        string[] monthList = { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" };
        ///////////////////////////////////////////////////////////////////////////////////////////////
        //////
        // Function Name  : <AddBill>
        // Summary  : <To add a generated bill to the database by calling the corresponding DB Function>
        // Input Parameters : <Object of bill class>
        // Output Parameters :<Integer value billId>
        // Return Value  : <Unique value of autogenerated bill id>
        //
        ///////////////////////////////////////////////////////////////////////////////////////////////
        public Int64 AddBill(IBill obj)
        {
            Int64 billId = 0;
            IBillDB billDBobj = BillDBFactory.CreateBillDB();
            try
            {
                billId = billDBobj.AddBill(obj);
            }
            catch (Exception ex)
            {
                throw ex; 
            }

            return billId;
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////
        //
        // Function Name  : <GenerateBill>
        // Summary  : <To generate a bill for a single connection of a particular user>
        // Input Parameters : <Object of bill class containing customer id,connection Number,year,month and generation date>
        // Output Parameters <Integer value billId>
        // Return Value  : <Unique value of autogenerated bill id>
        //
        ///////////////////////////////////////////////////////////////////////////////////////////////
        public Int64 GenerateBill(IBill bill)
        {
            double amount = 0;
            double arrears = 0;
            double advance = 0;
            double discount = 0;
            double totalAmount = 0;
            amount = GetAmount(bill);
            IBill adjustment = GetAdjustment(bill);
            arrears = adjustment.Arrears;
            advance = adjustment.AdvancedPayment;
            string paymode = CheckDiscount(bill);
            if (paymode.ToUpper().Equals("EBILL"))
            {
                discount = (.02 * amount);

            }
            totalAmount = GetTotalAmount(amount, arrears, advance, discount);
            IBill billobj = BillFactory.CreateBill(bill.BillId, bill.CustomerId, bill.ConnectionId, amount, bill.GenerateDate, bill.Year, bill.Month, arrears, advance, discount, totalAmount);
            Int64 billId = AddBill(billobj);
            return billId;
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////
        //
        // Function Name  : <GetAmount>
        // Summary  : <To get the amount of the bill by making the sum of all the bill items respective to that bill>
        // Input Parameters : <Object of bill class containing customer id,connection Number,year,month and generation date>
        // Output Parameters <Double value amount>
        // Return Value  : <Total amount of the bill which is the sum of all call costs>
        //
        ///////////////////////////////////////////////////////////////////////////////////////////////
        public double GetAmount(IBill bill)
        {
            IBillDB billDBobj = BillDBFactory.CreateBillDB();
            double amount=0;
            try
            {
                 amount = billDBobj.GetTotal(bill);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return amount;
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////
        //
        // Function Name  : <GetAdjustment>
        // Summary  : <To get the arrears and advance payments of the bill>
        // Input Parameters : <Object of bill class containing customer id,connection Number,year,month and generation date>
        // Output Parameters <Object of bill class containing arrears and advance payments>
        // Return Value  : <Arrears and advance payments value>
        //
        ///////////////////////////////////////////////////////////////////////////////////////////////

        public IBill GetAdjustment(IBill bill)
        {
            IBill billNew = null;
            IBillDB billDBobj = BillDBFactory.CreateBillDB();
            try
            {
                 billNew = billDBobj.GetAdjustment(bill);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return billNew;
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////
        //
        // Function Name  : <CheckDiscount>
        // Summary  : <To find the mode of payment the customer uses to pay>
        // Input Parameters : <Object of bill class containing customer id,connection Number,year,month and generation date>
        // Output Parameters <String value paymode>
        // Return Value  : <Payment mode value>
        //
        ///////////////////////////////////////////////////////////////////////////////////////////////
        public string CheckDiscount(IBill bill)
        {
            IBillDB billDBobj = BillDBFactory.CreateBillDB();
            string paymode = "";
            try
            {
                 paymode = billDBobj.CheckDiscount(bill);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return paymode;
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////
        //
        // Function Name  : <GetTotalAmount>
        // Summary  : <To find the Total Amount of the bill payable for a specific month >
        // Input Parameters : <double amount, double arrear, double advance, double discount>
        // Output Parameters <double value totalAmount>
        // Return Value  : <total payable amount>
        //
        ///////////////////////////////////////////////////////////////////////////////////////////////
        public double GetTotalAmount(double amount, double arrear, double advance, double discount)
        {
            double totalAmount = ((amount + arrear) - advance) - discount;
            return totalAmount;
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////
        //
        // Function Name  : <ViewAllBill>
        // Summary  : <To view all the generated bills from the database by calling the corresponding DBFunction>
        // Input Parameters : None
        // Output Parameters <List of all the bills>
        // Return Value  : <List of all Bills with details>
        //
        ///////////////////////////////////////////////////////////////////////////////////////////////
        public List<IBill> ViewAllBill()
        {
            List<IBill> BillList = null;
            IBillDB billDBobj = BillDBFactory.CreateBillDB();
            try
            {
                BillList = new List<IBill>();
                BillList = billDBobj.ViewAllBill();
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return BillList;
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////
        //
        // Function Name  : <ViewBill>
        // Summary  : <To view a particular bill by its billid by calling the corresponding DBFunction>
        // Input Parameters : <Object of bill class containing bill id>
        // Output Parameters <Object of the bill class>
        // Return Value  : < Entire Bill details >
        //
        ///////////////////////////////////////////////////////////////////////////////////////////////
        public IBill ViewBill(IBill obj)
        {
            IBill bill = null;
            IBill newBill = null;
            IBillDB billDBobj = BillDBFactory.CreateBillDB();
            try
            {
                bill = billDBobj.ViewBill(obj);
                string monthString = monthList[Convert.ToInt32(bill.Month) - 1];
                newBill = BillFactory.CreateBill(bill.BillId, bill.CustomerId, bill.ConnectionId, bill.Amount, bill.GenerateDate, bill.Year, monthString, bill.Arrears, bill.AdvancedPayment, bill.Discount, bill.Total);
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return newBill;
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////
        //
        // Function Name  : <ViewUpdateBill>
        // Summary  : <To view a particular bill by its billid by calling the corresponding DBFunction>
        // Input Parameters : <Object of bill class containing bill id>
        // Output Parameters <Object of the bill class>
        // Return Value  : < Entire Bill details >
        //
        ///////////////////////////////////////////////////////////////////////////////////////////////
        public IBill ViewUpdateBill(IBill obj)
        {
            IBill bill = null;
            IBill newBill = null;
            IBillDB billDBobj = BillDBFactory.CreateBillDB();
            try
            {
                bill = billDBobj.ViewBill(obj);
                newBill = BillFactory.CreateBill(bill.BillId, bill.CustomerId, bill.ConnectionId, bill.Amount, bill.GenerateDate, bill.Year,bill.Month, bill.Arrears, bill.AdvancedPayment, bill.Discount, bill.Total);
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return newBill;
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////
        //
        // Function Name  : <ViewBillByConnection>
        // Summary  : <To view a particular bill based on connection number and year/month by calling the corresponding DBFunction>
        // Input Parameters : <Object of bill class containing connection number,year,month>
        // Output Parameters <Object of the bill class>
        // Return Value  : < Entire Bill details >
        //
        ///////////////////////////////////////////////////////////////////////////////////////////////
        public IBill ViewBillByConnection(IBill obj)
        {
            IBill bill = null;
            IBill newBill = null;
            IBillDB billDBobj = BillDBFactory.CreateBillDB();
            try
            {
                bill = billDBobj.ViewBillByConnection(obj);
                string monthString = monthList[Convert.ToInt32(bill.Month) - 1];
                newBill = BillFactory.CreateBill(bill.BillId,bill.CustomerId,bill.ConnectionId,bill.Amount,bill.GenerateDate,bill.Year,monthString,bill.Arrears,bill.AdvancedPayment,bill.Discount,bill.Total);
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return newBill;
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////
        //
        // Function Name  : <CheckConnection>
        // Summary  : <To check if a particular connection number exists and is active by calling the corresponding DBFunction>
        // Input Parameters : <Object of bill class containing connection number>
        // Output Parameters <integer value flag>
        // Return Value  : < 0/1 >
        //
        ///////////////////////////////////////////////////////////////////////////////////////////////
        public int CheckConnection(IBill obj)
        {
            int flag = 0;
            IBillDB billItemDBobj = BillDBFactory.CreateBillDB();
            try
            {
                flag = billItemDBobj.CheckConnection(obj);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return flag;
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////
        //
        // Function Name  : <UpdateBill>
        // Summary  : <To update the bill amount of a bill by calling the corresponding DBFunction>
        // Input Parameters : <Object of bill class>
        // Output Parameters <integer value rowsupdated>
        // Return Value  : < number of rows updated >
        //
        ///////////////////////////////////////////////////////////////////////////////////////////////
        public int UpdateBill(IBill obj)
        {
            int rowsUpdated = 0;
            IBillDB billDBobj = BillDBFactory.CreateBillDB();
            try
            {
                rowsUpdated = billDBobj.UpdateBill(obj);
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return rowsUpdated;
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////
        //
        // Function Name  : <CheckForUpdate>
        // Summary  : <To check the number of bills that needs to be updated by calling the corresponding DBFunction>
        // Input Parameters : N/A
        // Output Parameters :<List of all the bills that needs to be updated>
        // Return Value  : <List of bills with details>
        //
        ///////////////////////////////////////////////////////////////////////////////////////////////
        public List<IBill> CheckForUpdate()
        {
            List<IBill> billList;
            IBillDB bill = BillDBFactory.CreateBillDB();
            try
            {
                billList = bill.CheckForUpdate();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return billList;
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////
        //
        // Function Name  : <ViewConnection1>
        // Summary  : <To populate the list of connections for a customer>
        // Input Parameters : <Customer Id>
        // Output Parameters <List of all the connections of the customer>
        // Return Value  : <List connection>
        //
        ///////////////////////////////////////////////////////////////////////////////////////////////
        public List<long> ViewConnection1(string custId)
        {
            List<long> connection;
            IBillDB bill = BillDBFactory.CreateBillDB();
            try
            {
                connection = bill.ViewConnection1(custId);
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return connection;
        }
    }
}
